//Ejercicio 1
//En la clase ComboEspecial
public Class ComboEspecial extends Combo{
	private List<Float> preciosObsequios;
	private float valorCanjeEspecial;

	public ComboEspecial(String nombre, float precio, float puntosDescuento, List<Float> preciosObsequios, float valorCanjeEspecial){
		super(nombre, precio, puntosDescuento);
		this.preciosObsequios = preciosObsequios; //No se inicializa la lista pq ingresa por parámetro
		this.valorCanjeEspecial = valorCanjeEspecial;
	}

	public List<Float> getPreciosObsequios(){
		return this.preciosObsequios;
	}

	public float getValorCanjeEspecial(){
		return this.valorCanjeEspecial;
	}
}

//Ejercicio 2
//En la clase Combo
public boolean esPosibleCanjearCombo(float puntosAcumulados){
	return puntosAcumulados >= this.getPuntosDescuento();
}

//En la clase ComboEspecial

@Override
public boolean esPosibleCanjearCombo(float puntosAcumulados){
	float sumaPreciosObjetos = 0;
	for(Iterator<Float> it = preciosObsequios.iterator(); it.hasNext();){
		Float precioActual = it.next();
		sumaPrecioObsequios+=precioActual;
	}
	return super.esPosibleCanjearCombo(puntosAcumulados) && sumaPrecioObsequios>this.valorCanjeEspecial;
}

//Ejercicio 3
//En clase Cerveceria

public int obtenerCantidadCombos(String nombre){
	int cantCombo = 0;
	for(Iterator<OrdenDeCompra> it = ordenesDeCompra.iterator(); it.hasNext();){
		OrdenDeCompra ordenActual = it.next();
		if(ordenActual.getCombo().getNombre() == nombre){
			cantCombo++;
		}
	}
	return cantCombo;
}

//Ejercicio 4
//El método aplica el descuento al precio del combo, siempre y cuando tenga puntos necesarios para el canje
//Resultado:
270.0
159.2
250.0 //No tiene los puntos necesarios para aplicar el descuento

