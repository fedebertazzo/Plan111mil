//Ejercicio 1
//En la clase CursoEspecial
public Class CursoEspecial extends Curso{
  private float notaMinimaTrabajo;
  
public CursoEspecial(String nombre, String modalidad, float minimoNotaCurso, float notaMinimaTrabajo){
  super(nombre, modalidad, minimoNotaCurso);
  this.minimoNotaTrabajo = minimoNotaTrabajo;
  }

public float getNotaMinimaTrabajo(){
  return notaMinimaTrabajo;
  }

public void setNotaMinimaTrabajo(float nota){
  this.notaMinimaTrabajo = nota;
  }
}

//Ejercicio 2
//En la clase Curso

public boolean estaAprobado(List<float> notas){
  if(notas.get(0) >= minimoNotaCurso){
    return true;
  }else{
    return false;
  }
}

//En la clase CursoEspecial
@Override
public boolean estaAprobado(List<float> notas){
  float suma=0;
  for(i=1, i< notas.size();i++){
    suma=suma+notas.get(i);
    }
  float promedio = suma/=(notas.size()-1); //Utiliza el igual para sacar el resultado de la operación dentro del paréntesis
  return(super.estaAprobado(notas) && promedio > this.notaMinimaTrabajo);
}

//Ejercicio 3
public boolean inscribirACurso(Capacitacion capacitacion){
  int capVirtuales = 0;
  for(Iterator<Capacitacion> it=this.capacitaciones.iterator(); it.hasNext();){
    capActual = it.next();
    if(capActual.getCurso().getModalidad()=="virtual"){
      capVirtuales++;
    }
  }
  if(capVirtuales <= this.cupoModalidadVirtual || capacitacion.getCurso().getModalidad() == "presencial"){
    return this.capacitaciones.add(capacitacion);
  }else{
    return false;
  }
}

//Ejercicio 4
6
8
7

//Ejercicio 5
SELECT I.DNI, AVG(C.nota)
FROM Instructor AS I
INNER JOIN Capacitacion AS C
ON I.DNI = C.Instructor_DNI
INNER JOIN Curso
ON C.Curso_idCurso = Curso.idCurso
WHERE Curso.modalidad = "presencial"
GROUP BY I.DNI
ORDER BY I.DNI DESC

123458 5.5
123457 5.5
123456 5.5
